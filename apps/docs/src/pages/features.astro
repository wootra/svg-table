---
import { LogoDemo } from '@repo/demo-components';
import IndividualLayout from '../layouts/IndividualLayout.astro';
const selected = '/features';
---

<IndividualLayout title='Welcome to SVG Title: Features' selected={selected}>
  <div class="perspective-wrapper">
    <div class="grid-background"></div>
    
    <div class="feature-wrapper">
    <h1>Features</h1>
    <div class="logo-holder">
      <LogoDemo width={640} bgColor={null}/>
  
    </div>
    <section id='features' class='features '>
      <div class='feature'>
        <h4>Flexible Layout</h4>
        <p>
          Create tables with custom layouts, including merged cells and
          nested structures.
        </p>
      </div>
      <div class='feature'>
        <h4>SVG Power</h4>
        <p>
          Leverage the full capabilities of SVG for rich, interactive
          table designs.
        </p>
      </div>
      <div class='feature'>
        <h4>Multi-context design</h4>
        <p>SVG Overflow protection as well as option to overflow</p>
      </div>
      <div class='feature'>
        <h4>Easy Integration</h4>
        <p>Seamlessly integrate with React and Javascript Object</p>
      </div>
      <div class='feature'>
        <h4>Multiline Support</h4>
        <p>Easily add multiline contents in the cell by adding linefeed</p>
      </div>
      <div class='feature'>
        <h4>Simple or Complex</h4>
        <p>Support Simple or Complext use cases on demand</p>
      </div>
    </section>
  </div>
  </div>
  
</IndividualLayout>

<style>
  .logo-holder {
		display: flex;
		justify-content: center;
		align-items: center;
		height: max-content;
		margin-bottom: 2rem;
		margin-block: 2rem;
	}

.perspective-wrapper {
  perspective: 1000px;
  position: absolute;
  inset: 0;
  padding-left: 300px;
  padding-right: 3rem;
  padding-top: 5rem;
  display: grid;
  align-items: center;
  width: 100vw;
  height: 100vh;
  overflow:hidden;
}

.perspective-wrapper::after {
    /* transition: transform 3s ease; */
    position: fixed;
    content: '';
    left: 0;
    right: 0;
    top:0;
    bottom: 0;
    
    /* background-image: linear-gradient(to bottom, var(--color-background) transparent); */
    background-image: linear-gradient(to bottom, #23272f 0%, #23272f 10%, transparent);
    /* z-index: 1; */
  }


.feature-wrapper {
  position: relative;
 width: 100%;
 max-height: max-content;
 displaly: flex;
 flex-direction: column;
 gap: 4rem;
 z-index: 1;
}

.feature-wrapper h1 {
  height: 4rem;
  flex-grow: 0;
  flex-shrink: 0;
}

	.features {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 1rem;
		margin-bottom: 2rem;
    
    
	}
  h1 {
    z-index: 3;
  }

	.feature {
		background-color: var(--color-secondary);
    opacity: 0.8;
    transition: all 0.3s ease;
		padding: 1rem;
		border-radius: 4px;
    z-index: 3;
	}


  .feature:hover {
    transform: translateY(-5px);
    opacity: 1;
    box-shadow: 0 5px 15px rgba(0, 200, 255, 0.2);
  }

  .grid-background {
    /* transition: transform 3s ease; */

    perspective-origin: bottom;
    transform-style: preserve-3d;
    position: fixed;
   
    top: -100vh;
    left: -100vw;
    right: -100vw;
    bottom: -100vh;
    /* background-image: linear-gradient(to bottom, var(--color-background) transparent); */
    /* background-image: linear-gradient(to bottom, 0% #23272f, 50% #23272f, 100% transparent); */
    /* z-index: 2; */
  }




  @keyframes grid-swing {
    0% {
      transform: rotateX(70deg) rotateY(-10deg) rotateZ(30deg);
    }
    50% {
      transform: rotateX(30deg) rotateY(-10deg) rotateZ(-30deg);
    }
    100% {
      transform: rotateX(70deg) rotateY(-10deg) rotateZ(30deg);
    }
  }

  .grid-background::after {
    animation: grid-swing 60s ease-in-out infinite;
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    opacity: 0.2;
    --grid-size: 100px;
    --grid-color: rgb(45, 117, 138);
    --grid-border: 3px;
    z-index: 1;
    position: fixed;
    
    background-image: 
      linear-gradient(to right, var(--grid-color) var(--grid-border), transparent var(--grid-border)),
      linear-gradient(to bottom, var(--grid-color) var(--grid-border), transparent var(--grid-border));
    background-size: var(--grid-size) var(--grid-size);
  }
</style>